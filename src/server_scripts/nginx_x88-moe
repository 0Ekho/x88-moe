## example Nginx configuration file, it could probably be a lot better

# this goes in the http block in nginx.conf
## x88.moe http settings
# limit_req_zone $binary_remote_addr zone=x88req:10m rate=10r/m;
# limit_conn_zone $binary_remote_addr zone=x88conn:10m;
# client_max_body_size 269m;

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name x88.moe;

    add_header "X-Robots-Tag" "none, noarchive, nosnippet, notranslate, noimageindex, noodp";
    add_header "Content-Security-Policy" "default-src 'none'; font-src https://fonts.gstatic.com; img-src 'self'; object-src 'none'; script-src 'self'; style-src 'self' https://fonts.googleapis.com";
    add_header "X-Content-Type-Options" "nosniff";
    add_header "X-Frame-Options" "DENY";
    add_header "X-XSS-Protection" "1; mode=block";
    add_header "Referrer-Policy" "same-origin";

    ssl_certificate /etc/letsencrypt/live/x88.moe/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/x88.moe/privkey.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security max-age=15768000;

    limit_conn x88conn 4;
    limit_req zone=x88req burst=10 nodelay;
    limit_rate_after 10m;
    limit_rate 1m;

    root /usr/shar/nginx/x88/public/;

    index index.html index.htm index.nginx-debian.html index.php;

    location / {
        try_files $uri $uri/ =404;
    }
    # maybe will make a better 404 page later
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # I should probably change to whitelist files/directories that get to run php instead of blacklisting /f/
    # also it is a god idea to only give write access to your /f/ and the data folder
    location ^~ /f/ {
        try_files $uri $uri/ =404;
        # show user uploaded JS, HTML, etc. as plain text for safty
        location ~* \.(php|html|js|css|htm|xml|html5|)$ {
            add_header Content-Type text/plain;
        }
        # some source code extensions, show as text vs have to download
        #you could also set these in /etc/nginx/mime.types under text/plain
        location ~* \.(c|h|cc|hh|cpp|cxx|hpp|hxx|awk|sh|pl|pm|py|json|asm|s|lua|java|bat|vbs|ps|rb|cs|f77|f90|go|hs|csv|md|ini|yaml|log|cfg|conf|asc)$ {
            add_header Content-Type text/plain;
        }

    }
    location = /f/ {
        return $scheme://$server_name;
    }

    # shortlink rewrites
    location /s/ {
        rewrite /s/([_a-zA-Z0-9-]+) /api/v1/getshort.php?i=$1&r=0 last;
        return $scheme://$server_name;
    }
    location /r/ {
        rewrite /r/([_a-zA-Z0-9-]+) /short/reveal.php?i=$1&r=1 last;
        return $scheme://$server_name;
    }

    # everywhere else use php
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }

    location /auth/ {
        # require auth for admin scripts, you will need to make your htpasswd file, crypt() is insecure, use {SSHA}
        auth_basic "Authorization required";
        auth_basic_user_file /etc/nginx/htpasswd/x88-moe;
        autoindex on;
    }
}